{"version":3,"sources":["app.js","salary.js","main.js"],"names":["$","Salary","options","__this","this","setResult","value","result","period","netInPeriod","Unit","net","grossInPeriod","gross","ops","Percentage","opsInPeriod","maxOnPeriod","opsMax","ops2","oms","omsInPeriod","omsMax","oms2","fss","fssInPeriod","insurance","insuranceInPeriod","ndfl","ndflInPeriod","fot","fotInPeriod","nalogAll","nalogAllInPeriod","fullCost","fullCostInPeriod","max","percentageOnMin","percentageOnMax","onePercent","from","percentage","toFixed","setGross","Object","assign","setNet","salary","products","salaryInRussia","name","sort","a","b","valueA","valueB","comparison","Browser","navigator","appVersion","nameOffset","verOffset","ix","nAgt","userAgent","browserName","appName","fullVersion","parseFloat","majorVersion","parseInt","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","isNaN","iOS","test","window","MSStream","ratio","devicePixelRatio","screen","width","height","platform","iphoneX","isMobile","check","vendor","opera","substr","browserDetect","addClass","inputtimer","tpl_gross","tpl_fullCost","tpl_salaryInDollar","tpl_nalogAll","tpl_ndfl","tpl_ops","tpl_oms","tpl_fss","tpl_insurance","salaryInRussiaTpl","$app","html","$inApp","resultTpl","id","title","description","unit","arr","i","length","concat","formatUnit","renderRegions","o","classname","append","$input","find","$result","location","hash","replace","val","renderResult","document","scrollTop","offset","top","d","updValue","v","attr","exportToCSV","valueInPeriod","$mySalary","remove","clone","similar","$regions","each","e","data","insertBefore","insertAfter","updateRegions","setValue","$elem","removeAttr","cost","split","is","on","toggleClass","change","keyup","parent","event","removeClass","clearTimeout","setTimeout","ym","console","log"],"mappings":"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CA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,qBACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,cACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,cACA5C,MAAA,OACA,CACA4C,KAAA,wBACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,kBACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,uBACA5C,MAAA,OACA,CACA4C,KAAA,uBACA5C,MAAA,OACA,CACA4C,KAAA,kBACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,aACA5C,MAAA,MACA,CACA4C,KAAA,eACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,aACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,kBACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,aACA5C,MAAA,OACA,CACA4C,KAAA,SACA5C,MAAA,OACA,CACA4C,KAAA,oCACA5C,MAAA,OACA,CACA4C,KAAA,kCACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,aACA5C,MAAA,OACA,CACA4C,KAAA,oBACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,cACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,QACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,WACA5C,MAAA,OACA,CACA4C,KAAA,YACA5C,MAAA,OACA,CACA4C,KAAA,OACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,OACA,CACA4C,KAAA,UACA5C,MAAA,QAEA6C,KA8TA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAA9C,MACAiD,EAAAF,EAAA/C,MAEAkD,EAAA,EACAD,EAAAD,EACAE,GAAA,EACAF,EAAAC,IACAC,EAAA,GAEA,OAAAA,IAtUAC,EAyUA,WAIAC,UA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","file":"main.js","sourcesContent":["$(function () {\n  var salary = new Salary();\n\n  const products = {\n    salt: 17,\n    buckwheat: 50,\n    dollar: 65.56,\n    gas_95: 47.35,\n    gold_585: 1500,\n    salary_min_2018: 32635,\n    iphone: 60000,\n    apartment: 6000000,\n    car: 1000000\n  }\n\n  const salaryInRussia = [\n    {\n      name: \"Белгород\",\n      value: 27280\n    }, {\n      name: \"Брянск\",\n      value: 20790\n    }, {\n      name: \"Владимир\",\n      value: 22770\n    }, {\n      name: \"Воронеж\",\n      value: 26070\n    }, {\n      name: \"Иваново\",\n      value: 21120\n    }, {\n      name: \"Калуга\",\n      value: 27060\n    }, {\n      name: \"Кострома\",\n      value: 22550\n    }, {\n      name: \"Курск\",\n      value: 22770\n    }, {\n      name: \"Липецк\",\n      value: 24640\n    }, {\n      name: \"Московская область\",\n      value: 42460\n    }, {\n      name: \"Орёл\",\n      value: 16830\n    }, {\n      name: \"Рязань\",\n      value: 21340\n    }, {\n      name: \"Смоленск\",\n      value: 20020\n    }, {\n      name: \"Тамбов\",\n      value: 21450\n    }, {\n      name: \"Тверь\",\n      value: 20130\n    }, {\n      name: \"Тула\",\n      value: 25520\n    }, {\n      name: \"Ярославль\",\n      value: 26620\n    }, {\n      name: \"Москва\",\n      value: 66880\n    }, {\n      name: \"Карелия\",\n      value: 32450\n    }, {\n      name: \"Коми\",\n      value: 39380\n    }, {\n      name: \"Архангельск\",\n      value: 36850\n    }, {\n      name: \"Вологда\",\n      value: 28820\n    }, {\n      name: \"Калининград\",\n      value: 28820\n    }, {\n      name: \"Ленинградская область\",\n      value: 28050\n    }, {\n      name: \"Мурманск\",\n      value: 43670\n    }, {\n      name: \"Новгород\",\n      value: 27390\n    }, {\n      name: \"Псков\",\n      value: 24310\n    }, {\n      name: \"Санкт-Петербург\",\n      value: 45430\n    }, {\n      name: \"Адыгея\",\n      value: 20680\n    }, {\n      name: \"Калмыкия\",\n      value: 20130\n    }, {\n      name: \"Краснодар\",\n      value: 25850\n    }, {\n      name: \"Астрахань\",\n      value: 27390\n    }, {\n      name: \"Волгоград\",\n      value: 23650\n    }, {\n      name: \"Ростов\",\n      value: 23320\n    }, {\n      name: \"Дагестан\",\n      value: 25160\n    }, {\n      name: \"Ингушетия\",\n      value: 20790\n    }, {\n      name: \"Кабардино-Балкарская\",\n      value: 18920\n    }, {\n      name: \"Карачаево-Черкесская\",\n      value: 18040\n    }, {\n      name: \"Северная Осетия\",\n      value: 18590\n    }, {\n      name: \"Чечня\",\n      value: 21010\n    }, {\n      name: \"Ставрополь\",\n      value: 22000\n    }, {\n      name: \"Башкортостан\",\n      value: 28160\n    }, {\n      name: \"Марий Эл\",\n      value: 21230\n    }, {\n      name: \"Мордовия\",\n      value: 20900\n    }, {\n      name: \"Татарстан\",\n      value: 27060\n    }, {\n      name: \"Удмуртская\",\n      value: 23430\n    }, {\n      name: \"Чувашия\",\n      value: 22990\n    }, {\n      name: \"Пермь\",\n      value: 27280\n    }, {\n      name: \"Киров\",\n      value: 22880\n    }, {\n      name: \"Нижний Новгород\",\n      value: 26840\n    }, {\n      name: \"Оренбург\",\n      value: 26070\n    }, {\n      name: \"Пенза\",\n      value: 22990\n    }, {\n      name: \"Самара\",\n      value: 27060\n    }, {\n      name: \"Саратов\",\n      value: 23430\n    }, {\n      name: \"Ульяновск\",\n      value: 22880\n    }, {\n      name: \"Курган\",\n      value: 22770\n    }, {\n      name: \"Свердловск\",\n      value: 32780\n    }, {\n      name: \"Тюмень\",\n      value: 50160\n    }, {\n      name: \"Ханты-Мансийский автономный округ\",\n      value: 61930\n    }, {\n      name: \"Ямало-Ненецкий автономный округ\",\n      value: 70620\n    }, {\n      name: \"Челябинск\",\n      value: 26620\n    }, {\n      name: \"Алтай\",\n      value: 24860\n    }, {\n      name: \"Бурятия\",\n      value: 27720\n    }, {\n      name: \"Тыва\",\n      value: 30580\n    }, {\n      name: \"Хакасия\",\n      value: 32010\n    }, {\n      name: \"Забайкалье\",\n      value: 25300\n    }, {\n      name: \"Красноярский край\",\n      value: 29260\n    }, {\n      name: \"Иркутск\",\n      value: 32450\n    }, {\n      name: \"Кемерово\",\n      value: 17490\n    }, {\n      name: \"Новосибирск\",\n      value: 17600\n    }, {\n      name: \"Омск\",\n      value: 28820\n    }, {\n      name: \"Томск\",\n      value: 32230\n    }, {\n      name: \"Саха\",\n      value: 53460\n    }, {\n      name: \"Камчатка\",\n      value: 50600\n    }, {\n      name: \"Приморск\",\n      value: 33990\n    }, {\n      name: \"Хабаровск\",\n      value: 35200\n    }, {\n      name: \"Амур\",\n      value: 34540\n    }, {\n      name: \"Магадан\",\n      value: 55880\n    }, {\n      name: \"Сахалин\",\n      value: 51260\n    }, {\n      name: \"Чукотка\",\n      value: 56100\n    }\n  ].sort(compare);\n\n  var Browser = browserDetect();\n\n  $('body').addClass(Browser.isMobile);\n\n  window.inputtimer = null;\n\n  var $app = $('#app').html('');\n\n  var $inApp = $((function () {\n\n    let tpl_gross = resultTpl({\n      id: 'gross',\n      title: 'Оклад (гросс)',\n      description: 'Оклад до вычета <strong>13%</strong> НДФЛ. Именно гросс оклад фиксируются в трудовом договоре с сотрудником',\n      unit: '₽'\n    });\n\n    let tpl_fullCost = resultTpl({\n      id: 'fullCost',\n      title: 'Стоимость сотрудника для работодателя',\n      description: 'Зарплата сотруднику на руки плюс сумма всех выплат за сотрудника государству. Расходы на организацию рабочего места для сотрудника не учитываются',\n      unit: '₽'\n    });\n\n    let tpl_salaryInDollar = resultTpl({\n      id: 'salaryInDollar',\n      title: 'На руки в долларах',\n      description: 'Курс конвертации <strong>' + products.dollar + '</strong> рублей за <strong>1</strong> доллар',\n      unit: '$'\n    });\n\n    let tpl_nalogAll = resultTpl({\n      id: 'nalogAll',\n      title: 'Все выплаты государству',\n      description: 'Сумма всех выплат государству: НДФЛ, ОПС, ОМС, ФСС и взносов по «травматизму»',\n      unit: '₽'\n    });\n\n    let tpl_ndfl = resultTpl({\n      id: 'ndfl',\n      title: 'Налог на доходы физических лиц (НДФЛ)',\n      description: 'Работодатель выплачивает за сотрудника налог государству как налоговый агент. Налог на доход для физического лица включен в оклад сотрудника и составляет <strong>13%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_ops = resultTpl({\n      id: 'ops',\n      title: 'В фонд Обязательного пенсионного страхования (ОПС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>22%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_oms = resultTpl({\n      id: 'oms',\n      title: 'Обязательное медицинское страхование жизни (ОМС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>5,1%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_fss = resultTpl({\n      id: 'fss',\n      title: 'В фонд социального страхования (ФСС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>2,9%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_insurance = resultTpl({\n      id: 'insurance',\n      title: 'Взносы по «травматизму»',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника. Размер отчислений зависит от присвоенного класса профессионального риска. Минимально <strong>0,2%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let salaryInRussiaTpl = renderRegions(salaryInRussia);\n\n    let tpl = `\n<din class=\"app__inner\">\n  <form class=\"app__form\">\n  <div class=\"search\">\n    <input id=\"search\" type=\"number\" min=\"0\" max=\"3000000\" autofocus=\"\" class=\"search__input search__input_not-empty\" value=\"0\">\n    <label for=\"search\" class=\"search__placeholder\">Cумма, которая получается на руки (нетто)</label> \n  </div>\n  </form>\n  <div class=\"result\">\n    <section>\n      ${tpl_gross}\n      ${tpl_fullCost}  \n      <hr>\n      ${tpl_salaryInDollar}\n    </section>\n    <section> \n      <h2>Налоги</h2>\n      ${tpl_nalogAll} \n      <hr>\n      ${tpl_ndfl} \n      ${tpl_ops} \n      ${tpl_oms} \n      ${tpl_fss} \n      ${tpl_insurance}\n    </section>\n    <div class=\"section\">\n      <a id=\"salaryExport\" class=\"link link_export\" href=\"#\" download=\"salary.csv\">Экспортировать в CSV</a>\n    </div>\n    <section >\n      <h2>Средняя зарплата в регионах России за 2019 год</h2>\n      <div id=\"salaryInRussia\">\n        ${salaryInRussiaTpl}\n      </div>\n    </section>\n  </div>\n</div>`;\n\n    function resultTpl(o) {\n\n      var classname = (o.unit == '$') ? 'cost_dollar' : '';\n\n      return `<div class=\"result__line\" id=\"${o.id}\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">${o.title}</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost ${classname}\">0</span> ${o.unit}/мес\n      </div>\n      <div class=\"result__per result__per-year\">\n        <span class=\"cost ${classname}\">0</span> ${o.unit}/год\n      </div>\n    </div>\n    <div class=\"result__body\">\n      <p>${o.description}</p>\n    </div>\n  </div>`;\n    }\n\n    return tpl;\n  })());\n\n  $app.append($inApp);\n\n\n\n  var $input = $inApp.find('.search__input');\n  var $result = $inApp.find('.result');\n\n\n  if (location.hash) {\n    var value = +location.hash.replace('#', '');\n    $input.val(value);\n    renderResult(value);\n    \n\n    $(document).scrollTop($app.offset().top);\n\n  } else {\n    renderResult(0);\n    \n  }\n\n  setValue($input);\n\n  $result.find('.result__head .result__per').each(function (i, e) {\n    if ($(e).is('.result__per-year')) {\n      $(e).addClass('result__per_selected');\n    }\n  });\n\n  $result.on('click','.result__per', function () {\n    if ($('body').is('.mobile')) {\n      $('.result__per').toggleClass('result__per_selected');\n    }\n  });\n\n  $input.change(function () {\n    $(this).keyup();\n  });\n\n  $result.find('.result__title').on('click', function () {\n    $(this).parent().parent().find('.result__body').toggleClass('result__body_visible');\n  });\n\n  $input.keyup(function (event) {\n\n    var value = +$(this).val();\n\n    setValue($(this));\n\n    var d = renderResult(value);\n\n    if ($(this).val()) {\n      $(this).addClass('search__input_not-empty');\n    } else {\n      $(this).removeClass('search__input_not-empty');\n    }\n\n    clearTimeout(window.inputtimer);\n    window.inputtimer = setTimeout(function () {\n      if (ym) ym(54839833, 'reachGoal', 'SEARCH_RESULT', {\n        value: value\n      });\n\n    }, 1000);\n\n\n    location.hash = '#' + d.net;\n\n\n  });\n\n  function renderResult(value) {\n    var d = salary.setNet(value);\n\n    updValue('gross');\n    updValue('fullCost');\n    updValue('nalogAll');\n    updValue('ndfl');\n    updValue('ops');\n    updValue('oms');\n    updValue('fss');\n    updValue('insurance');\n\n\n    $('#salaryInDollar').find('.result__per-month .cost').html(formatUnit((d['net'] / products.dollar).toFixed(2)));\n    $('#salaryInDollar').find('.result__per-year .cost').html(formatUnit((d['netInPeriod'] / products.dollar).toFixed(2)));\n\n    $('#salaryExport').attr('href', 'data:text/csv,' + exportToCSV(d));\n\n    updateRegions(d['gross'], d['grossInPeriod']);\n    \n\n    function updValue(v) {\n      $('#' + v).find('.result__per-month .cost').html(formatUnit(d[v]));\n      $('#' + v).find('.result__per-year .cost').html(formatUnit(d[v + 'InPeriod']));\n    }\n\n\n    return d;\n  }\n\n  function setValue($elem) {\n\n    value = $elem.val();\n\n    if (value) {\n      $elem.attr('value', value);\n    } else {\n      $elem.removeAttr('value');\n    }\n  }\n\n  function formatUnit(value) {\n    value = (/\\.\\d/.test(value)) ? value + '' : value + '.00';\n    value = (/\\.\\d{2}/.test(value)) ? value : value + '0';\n    value = (value).replace(/\\d(?=(\\d{3})+\\.)/g, '$& ');\n    \n    var cost = value.split('.');\n    value = '<span class=\"cost__first\">' + cost[0] + '</span><span class=\"cost__last\">.' + cost[1] + '</span>';\n\n    return value;\n  }\n\n  function renderRegions(arr) {\n\n    var result = `<div class=\"result__line result__line-my-salary\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">Моя зарплата (гросс)</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost\">0.00</span> ₽/мес\n      </div>\n      <div class=\"result__per result__per-year result__per_selected\">\n        <span class=\"cost\">0.00</span> ₽/год\n      </div>\n    </div>\n  </div>`;\n    \n    for (var i = 0; i < arr.length; i++) {\n      result += `<div class=\"result__line result__line-regions\" data-salary=\"${arr[i].value}\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">${arr[i].name}</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost\">${formatUnit(arr[i].value)}</span> ₽/мес\n      </div>\n      <div class=\"result__per result__per-year\">\n        <span class=\"cost\">${formatUnit(arr[i].value * 12)}</span> ₽/год\n      </div>\n    </div>\n  </div>`;\n    }\n    \n    return result;\n  }\n  \n  \n  function updateRegions(value, valueInPeriod){\n    var $mySalary = $('#salaryInRussia').find('.result__line-my-salary').remove().clone();\n    var similar = 0;\n    var $regions = $('#salaryInRussia').find('.result__line-regions');    \n    \n    $regions.each(function(i,e){\n      \n      if ( $(e).data('salary') >= value ) similar = i;\n      \n    });\n    \n    $mySalary.find('.result__per-month').find('.cost').html(formatUnit(value));\n    $mySalary.find('.result__per-year').find('.cost').html(formatUnit(valueInPeriod));\n        \n    \n    if (value >= $($regions[similar]).data('salary') ){\n      $mySalary.insertBefore( $($regions[similar]) );\n    } else {    \n      $mySalary.insertAfter( $($regions[similar]) );\n    }\n    \n\n    \n  }\n  \n\n  function compare(a, b) {\n      const valueA = a.value;\n      const valueB = b.value;\n\n      let comparison = 0;\n      if (valueA > valueB) {\n        comparison = -1;\n      } else if (valueA < valueB) {\n        comparison = 1;\n      }\n      return comparison;\n    }\n\n  function browserDetect() {\n    \n    \n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if ((verOffset = nAgt.indexOf(\"Opera\")) != -1) {\n      browserName = \"opera\";\n      fullVersion = nAgt.substring(verOffset + 6);\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1)\n        fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if ((verOffset = nAgt.indexOf(\"MSIE\")) != -1) {\n      browserName = \"ie\";\n      fullVersion = nAgt.substring(verOffset + 5);\n\n    } else if ((verOffset = nAgt.indexOf(\"Chrome\")) != -1) {\n      browserName = \"chrome\";\n      fullVersion = nAgt.substring(verOffset + 7);\n\n    } else if ((verOffset = nAgt.indexOf(\"Safari\")) != -1) {\n      browserName = \"safari\";\n      fullVersion = nAgt.substring(verOffset + 7);\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1)\n        fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if ((verOffset = nAgt.indexOf(\"Firefox\")) != -1) {\n      browserName = \"firefox\";\n      fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if (nAgt.indexOf(\"FBAN\") != -1 && nAgt.indexOf(\"FBAV\") != -1) {\n      browserName = \"facebook\";\n      fullVersion = 0;\n\n    } else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <\n      (verOffset = nAgt.lastIndexOf('/'))) {\n      browserName = nAgt.substring(nameOffset, verOffset);\n      fullVersion = nAgt.substring(verOffset + 1);\n      if (browserName.toLowerCase() == browserName.toUpperCase()) {\n        browserName = navigator.appName;\n      }\n    }\n\n    if ((ix = fullVersion.indexOf(\";\")) != -1)\n      fullVersion = fullVersion.substring(0, ix);\n    if ((ix = fullVersion.indexOf(\" \")) != -1)\n      fullVersion = fullVersion.substring(0, ix);\n\n    majorVersion = parseInt('' + fullVersion, 10);\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    var ratio = window.devicePixelRatio || 1;\n    var screen = {\n      width: window.screen.width * ratio,\n      height: window.screen.height * ratio\n    };\n\n    return {\n      browserName: browserName.toLowerCase(),\n      fullVersion: fullVersion,\n      majorVersion: majorVersion,\n      appName: navigator.appName.toLowerCase(),\n      userAgent: navigator.userAgent.toLowerCase(),\n      platform: navigator.platform.toLowerCase(),\n      iphoneX: (iOS && screen.width == 1125 && screen.height === 2436) ? 'iphoneX' : '',\n      isMobile: (function () {\n        var check = 'not-mobile';\n        (function (a) {\n          if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = 'mobile';\n        })(navigator.userAgent || navigator.vendor || window.opera);\n        return check;\n      })()\n    }\n\n  };\n\n  function exportToCSV(o) {\n    return `\"\",\"В месяц (₽/мес)\",\"В год (₽/год)\"\\r\\n\n\"Зарплата на руки\",${o.net},${o.netInPeriod}\\r\\n\n\"Оклад\",${o.gross},${o.grossInPeriod}\\r\\n\n\"Полная стоимость сотрудника для работодателя\",${o.fullCost},${o.fullCostInPeriod}\\r\\n\n\"Все выплаты государству\",${o.nalogAll},${o.nalogAllInPeriod}\\r\\n\n\"Налог на доходы физических лиц (НДФЛ)\",${o.ndfl},${o.ndflInPeriod}\\r\\n\n\"В фонд Обязательного пенсионного страхования (ОПС)\",${o.ops},${o.opsInPeriod}\\r\\n\n\"Обязательное медицинское страхование жизни (ОМС)\",${o.oms},${o.omsInPeriod}\\r\\n\n\"В фонд социального страхования (ФСС)\",${o.fss},${o.fssInPeriod}\\r\\n\n\"Взносы по «травматизму»\",${o.insurance},${o.insuranceInPeriod}\\r\\n`;\n  }\n\n\n\n\n});","function Salary(options){\n  var __this = this;\n  \n  options = options || {};\n  this.options = {};\n  this.options.ndfl      = options.ndfl      || 13;      //НДФЛ\n  this.options.ops       = options.ops       || 22;      //Пенсионное страхование\n  this.options.opsMax    = options.opsMax    || 1150000  //Предельная величина дохода для пенсионного страхования\n  this.options.ops2      = options.ops2      || 10;      //Пенсионное страхование свыше предельной величины\n  this.options.oms       = options.oms       || 5.1;     //Медицинское страхование \n  this.options.omsMax    = options.omsMax    || 865000;  //Предельная величина дохода для медицинского страхования\n  this.options.oms2      = options.oms2      || 5.1;     //Медицинское страхование свыше предельной величины \n  this.options.fss       = options.fss       || 2.9;     //Социальное страхование \n  this.options.insurance = options.insurance || 0.2;     //Страховка\n  this.options.period    = options.period    || 12;      //период для расчета (месяцев)\n  \n  \n  \n  this.result = {};\n  \n  this.setGross = function(value){\n    \n    __this.result.gross = Unit(value);\n    __this.result.net = Unit(value - ( Percentage(value, __this.options.ndfl) ));\n    \n    Object.assign(__this.result, setResult(__this.result.gross));\n    \n    return __this.result;\n  }\n  \n  this.setNet = function(value){\n    \n    __this.result.net = Unit(value);\n    __this.result.gross = Unit(value / ( onePercent(100 - __this.options.ndfl) ));\n    \n    Object.assign(__this.result, setResult(__this.result.gross));\n    \n    return __this.result;\n  }\n  \n  function setResult(value){\n    let result = {};\n    let period = __this.options.period;\n    \n    result.netInPeriod       = Unit(__this.result.net * period);\n    result.grossInPeriod     = Unit(__this.result.gross * period);\n    \n    result.ops               = Unit( Percentage(value, __this.options.ops) );\n    result.opsInPeriod       = Unit( maxOnPeriod(result.grossInPeriod, __this.options.opsMax, __this.options.ops, __this.options.ops2) );\n    \n    result.oms               = Unit( Percentage(value, __this.options.oms) );\n    result.omsInPeriod       = Unit( maxOnPeriod(result.grossInPeriod, __this.options.omsMax, __this.options.oms, __this.options.oms2) );\n    \n    result.fss               = Unit( Percentage(value, __this.options.fss) );\n    result.fssInPeriod       = Unit(result.fss * period);\n    \n    result.insurance         = Unit( Percentage(value, __this.options.insurance) );\n    result.insuranceInPeriod = Unit(result.insurance * period);\n    \n    result.ndfl              = Unit( Percentage(value, __this.options.ndfl) );\n    result.ndflInPeriod      = Unit(result.ndfl * period);\n    \n    result.fot               = Unit(result.ops + result.oms + result.fss + result.insurance);\n    result.fotInPeriod       = Unit(result.fot * period);\n    \n    result.nalogAll          = Unit(result.ops + result.oms + result.fss + result.insurance + result.ndfl);\n    result.nalogAllInPeriod  = Unit(result.opsInPeriod + result.omsInPeriod + result.fssInPeriod + result.insuranceInPeriod + result.ndflInPeriod);\n\n    result.fullCost          = Unit(result.nalogAll + __this.result.net);\n    result.fullCostInPeriod  = Unit(result.opsInPeriod + result.omsInPeriod + result.fssInPeriod + result.insuranceInPeriod + result.ndflInPeriod + result.netInPeriod);\n    \n    return result;\n  }\n  \n  function maxOnPeriod(grossInPeriod, max, percentageOnMin, percentageOnMax){\n        \n    return ( grossInPeriod < max ) ? Percentage(grossInPeriod, percentageOnMin) : Percentage(max, percentageOnMin) + Percentage( (grossInPeriod - max), percentageOnMax);\n    \n  }\n\n  function onePercent(value){\n    return value / 100;  \n  }\n  \n  function Percentage(from, percentage){\n    return onePercent(from) * percentage;\n  }\n  \n  function Unit(value){\n    return +( value ).toFixed(2);\n  }\n  \n  \n  \n  return __this;\n  \n}","$(function(){\n$(function () {\n  var salary = new Salary();\n\n  const products = {\n    salt: 17,\n    buckwheat: 50,\n    dollar: 65.56,\n    gas_95: 47.35,\n    gold_585: 1500,\n    salary_min_2018: 32635,\n    iphone: 60000,\n    apartment: 6000000,\n    car: 1000000\n  }\n\n  const salaryInRussia = [\n    {\n      name: \"Белгород\",\n      value: 27280\n    }, {\n      name: \"Брянск\",\n      value: 20790\n    }, {\n      name: \"Владимир\",\n      value: 22770\n    }, {\n      name: \"Воронеж\",\n      value: 26070\n    }, {\n      name: \"Иваново\",\n      value: 21120\n    }, {\n      name: \"Калуга\",\n      value: 27060\n    }, {\n      name: \"Кострома\",\n      value: 22550\n    }, {\n      name: \"Курск\",\n      value: 22770\n    }, {\n      name: \"Липецк\",\n      value: 24640\n    }, {\n      name: \"Московская область\",\n      value: 42460\n    }, {\n      name: \"Орёл\",\n      value: 16830\n    }, {\n      name: \"Рязань\",\n      value: 21340\n    }, {\n      name: \"Смоленск\",\n      value: 20020\n    }, {\n      name: \"Тамбов\",\n      value: 21450\n    }, {\n      name: \"Тверь\",\n      value: 20130\n    }, {\n      name: \"Тула\",\n      value: 25520\n    }, {\n      name: \"Ярославль\",\n      value: 26620\n    }, {\n      name: \"Москва\",\n      value: 66880\n    }, {\n      name: \"Карелия\",\n      value: 32450\n    }, {\n      name: \"Коми\",\n      value: 39380\n    }, {\n      name: \"Архангельск\",\n      value: 36850\n    }, {\n      name: \"Вологда\",\n      value: 28820\n    }, {\n      name: \"Калининград\",\n      value: 28820\n    }, {\n      name: \"Ленинградская область\",\n      value: 28050\n    }, {\n      name: \"Мурманск\",\n      value: 43670\n    }, {\n      name: \"Новгород\",\n      value: 27390\n    }, {\n      name: \"Псков\",\n      value: 24310\n    }, {\n      name: \"Санкт-Петербург\",\n      value: 45430\n    }, {\n      name: \"Адыгея\",\n      value: 20680\n    }, {\n      name: \"Калмыкия\",\n      value: 20130\n    }, {\n      name: \"Краснодар\",\n      value: 25850\n    }, {\n      name: \"Астрахань\",\n      value: 27390\n    }, {\n      name: \"Волгоград\",\n      value: 23650\n    }, {\n      name: \"Ростов\",\n      value: 23320\n    }, {\n      name: \"Дагестан\",\n      value: 25160\n    }, {\n      name: \"Ингушетия\",\n      value: 20790\n    }, {\n      name: \"Кабардино-Балкарская\",\n      value: 18920\n    }, {\n      name: \"Карачаево-Черкесская\",\n      value: 18040\n    }, {\n      name: \"Северная Осетия\",\n      value: 18590\n    }, {\n      name: \"Чечня\",\n      value: 21010\n    }, {\n      name: \"Ставрополь\",\n      value: 22000\n    }, {\n      name: \"Башкортостан\",\n      value: 28160\n    }, {\n      name: \"Марий Эл\",\n      value: 21230\n    }, {\n      name: \"Мордовия\",\n      value: 20900\n    }, {\n      name: \"Татарстан\",\n      value: 27060\n    }, {\n      name: \"Удмуртская\",\n      value: 23430\n    }, {\n      name: \"Чувашия\",\n      value: 22990\n    }, {\n      name: \"Пермь\",\n      value: 27280\n    }, {\n      name: \"Киров\",\n      value: 22880\n    }, {\n      name: \"Нижний Новгород\",\n      value: 26840\n    }, {\n      name: \"Оренбург\",\n      value: 26070\n    }, {\n      name: \"Пенза\",\n      value: 22990\n    }, {\n      name: \"Самара\",\n      value: 27060\n    }, {\n      name: \"Саратов\",\n      value: 23430\n    }, {\n      name: \"Ульяновск\",\n      value: 22880\n    }, {\n      name: \"Курган\",\n      value: 22770\n    }, {\n      name: \"Свердловск\",\n      value: 32780\n    }, {\n      name: \"Тюмень\",\n      value: 50160\n    }, {\n      name: \"Ханты-Мансийский автономный округ\",\n      value: 61930\n    }, {\n      name: \"Ямало-Ненецкий автономный округ\",\n      value: 70620\n    }, {\n      name: \"Челябинск\",\n      value: 26620\n    }, {\n      name: \"Алтай\",\n      value: 24860\n    }, {\n      name: \"Бурятия\",\n      value: 27720\n    }, {\n      name: \"Тыва\",\n      value: 30580\n    }, {\n      name: \"Хакасия\",\n      value: 32010\n    }, {\n      name: \"Забайкалье\",\n      value: 25300\n    }, {\n      name: \"Красноярский край\",\n      value: 29260\n    }, {\n      name: \"Иркутск\",\n      value: 32450\n    }, {\n      name: \"Кемерово\",\n      value: 17490\n    }, {\n      name: \"Новосибирск\",\n      value: 17600\n    }, {\n      name: \"Омск\",\n      value: 28820\n    }, {\n      name: \"Томск\",\n      value: 32230\n    }, {\n      name: \"Саха\",\n      value: 53460\n    }, {\n      name: \"Камчатка\",\n      value: 50600\n    }, {\n      name: \"Приморск\",\n      value: 33990\n    }, {\n      name: \"Хабаровск\",\n      value: 35200\n    }, {\n      name: \"Амур\",\n      value: 34540\n    }, {\n      name: \"Магадан\",\n      value: 55880\n    }, {\n      name: \"Сахалин\",\n      value: 51260\n    }, {\n      name: \"Чукотка\",\n      value: 56100\n    }\n  ].sort(compare);\n\n  var Browser = browserDetect();\n\n  $('body').addClass(Browser.isMobile);\n\n  window.inputtimer = null;\n\n  var $app = $('#app').html('');\n\n  var $inApp = $((function () {\n\n    let tpl_gross = resultTpl({\n      id: 'gross',\n      title: 'Оклад (гросс)',\n      description: 'Оклад до вычета <strong>13%</strong> НДФЛ. Именно гросс оклад фиксируются в трудовом договоре с сотрудником',\n      unit: '₽'\n    });\n\n    let tpl_fullCost = resultTpl({\n      id: 'fullCost',\n      title: 'Стоимость сотрудника для работодателя',\n      description: 'Зарплата сотруднику на руки плюс сумма всех выплат за сотрудника государству. Расходы на организацию рабочего места для сотрудника не учитываются',\n      unit: '₽'\n    });\n\n    let tpl_salaryInDollar = resultTpl({\n      id: 'salaryInDollar',\n      title: 'На руки в долларах',\n      description: 'Курс конвертации <strong>' + products.dollar + '</strong> рублей за <strong>1</strong> доллар',\n      unit: '$'\n    });\n\n    let tpl_nalogAll = resultTpl({\n      id: 'nalogAll',\n      title: 'Все выплаты государству',\n      description: 'Сумма всех выплат государству: НДФЛ, ОПС, ОМС, ФСС и взносов по «травматизму»',\n      unit: '₽'\n    });\n\n    let tpl_ndfl = resultTpl({\n      id: 'ndfl',\n      title: 'Налог на доходы физических лиц (НДФЛ)',\n      description: 'Работодатель выплачивает за сотрудника налог государству как налоговый агент. Налог на доход для физического лица включен в оклад сотрудника и составляет <strong>13%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_ops = resultTpl({\n      id: 'ops',\n      title: 'В фонд Обязательного пенсионного страхования (ОПС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>22%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_oms = resultTpl({\n      id: 'oms',\n      title: 'Обязательное медицинское страхование жизни (ОМС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>5,1%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_fss = resultTpl({\n      id: 'fss',\n      title: 'В фонд социального страхования (ФСС)',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника и составляет <strong>2,9%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let tpl_insurance = resultTpl({\n      id: 'insurance',\n      title: 'Взносы по «травматизму»',\n      description: 'Отчисления идет за счет работодателя. Высчитывается из оклада сотрудника. Размер отчислений зависит от присвоенного класса профессионального риска. Минимально <strong>0,2%</strong> от оклада',\n      unit: '₽'\n    });\n\n    let salaryInRussiaTpl = renderRegions(salaryInRussia);\n\n    let tpl = `\n<din class=\"app__inner\">\n  <form class=\"app__form\">\n  <div class=\"search\">\n    <input id=\"search\" type=\"number\" min=\"0\" max=\"3000000\" autofocus=\"\" class=\"search__input search__input_not-empty\" value=\"0\">\n    <label for=\"search\" class=\"search__placeholder\">Cумма, которая получается на руки (нетто)</label> \n  </div>\n  </form>\n  <div class=\"result\">\n    <section>\n      ${tpl_gross}\n      ${tpl_fullCost}  \n      <hr>\n      ${tpl_salaryInDollar}\n    </section>\n    <section> \n      <h2>Налоги</h2>\n      ${tpl_nalogAll} \n      <hr>\n      ${tpl_ndfl} \n      ${tpl_ops} \n      ${tpl_oms} \n      ${tpl_fss} \n      ${tpl_insurance}\n    </section>\n    <div class=\"section\">\n      <a id=\"salaryExport\" class=\"link link_export\" href=\"#\" download=\"salary.csv\">Экспортировать в CSV</a>\n    </div>\n    <section >\n      <h2>Средняя зарплата в регионах России за 2019 год</h2>\n      <div id=\"salaryInRussia\">\n        ${salaryInRussiaTpl}\n      </div>\n    </section>\n  </div>\n</div>`;\n\n    function resultTpl(o) {\n\n      var classname = (o.unit == '$') ? 'cost_dollar' : '';\n\n      return `<div class=\"result__line\" id=\"${o.id}\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">${o.title}</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost ${classname}\">0</span> ${o.unit}/мес\n      </div>\n      <div class=\"result__per result__per-year\">\n        <span class=\"cost ${classname}\">0</span> ${o.unit}/год\n      </div>\n    </div>\n    <div class=\"result__body\">\n      <p>${o.description}</p>\n    </div>\n  </div>`;\n    }\n\n    return tpl;\n  })());\n\n  $app.append($inApp);\n\n\n\n  var $input = $inApp.find('.search__input');\n  var $result = $inApp.find('.result');\n\n\n  if (location.hash) {\n    var value = +location.hash.replace('#', '');\n    $input.val(value);\n    renderResult(value);\n    \n\n    $(document).scrollTop($app.offset().top);\n\n  } else {\n    renderResult(0);\n    \n  }\n\n  setValue($input);\n\n  $result.find('.result__head .result__per').each(function (i, e) {\n    if ($(e).is('.result__per-year')) {\n      $(e).addClass('result__per_selected');\n    }\n  });\n\n  $result.on('click','.result__per', function () {\n    if ($('body').is('.mobile')) {\n      $('.result__per').toggleClass('result__per_selected');\n    }\n  });\n\n  $input.change(function () {\n    $(this).keyup();\n  });\n\n  $result.find('.result__title').on('click', function () {\n    $(this).parent().parent().find('.result__body').toggleClass('result__body_visible');\n  });\n\n  $input.keyup(function (event) {\n\n    var value = +$(this).val();\n\n    setValue($(this));\n\n    var d = renderResult(value);\n\n    if ($(this).val()) {\n      $(this).addClass('search__input_not-empty');\n    } else {\n      $(this).removeClass('search__input_not-empty');\n    }\n\n    clearTimeout(window.inputtimer);\n    window.inputtimer = setTimeout(function () {\n      if (ym) ym(54839833, 'reachGoal', 'SEARCH_RESULT', {\n        value: value\n      });\n\n    }, 1000);\n\n\n    location.hash = '#' + d.net;\n\n\n  });\n\n  function renderResult(value) {\n    var d = salary.setNet(value);\n\n    updValue('gross');\n    updValue('fullCost');\n    updValue('nalogAll');\n    updValue('ndfl');\n    updValue('ops');\n    updValue('oms');\n    updValue('fss');\n    updValue('insurance');\n\n\n    $('#salaryInDollar').find('.result__per-month .cost').html(formatUnit((d['net'] / products.dollar).toFixed(2)));\n    $('#salaryInDollar').find('.result__per-year .cost').html(formatUnit((d['netInPeriod'] / products.dollar).toFixed(2)));\n\n    $('#salaryExport').attr('href', 'data:text/csv,' + exportToCSV(d));\n\n    updateRegions(d['gross'], d['grossInPeriod']);\n    \n\n    function updValue(v) {\n      $('#' + v).find('.result__per-month .cost').html(formatUnit(d[v]));\n      $('#' + v).find('.result__per-year .cost').html(formatUnit(d[v + 'InPeriod']));\n    }\n\n\n    return d;\n  }\n\n  function setValue($elem) {\n\n    value = $elem.val();\n\n    if (value) {\n      $elem.attr('value', value);\n    } else {\n      $elem.removeAttr('value');\n    }\n  }\n\n  function formatUnit(value) {\n    value = (/\\.\\d/.test(value)) ? value + '' : value + '.00';\n    value = (/\\.\\d{2}/.test(value)) ? value : value + '0';\n    value = (value).replace(/\\d(?=(\\d{3})+\\.)/g, '$& ');\n    \n    var cost = value.split('.');\n    value = '<span class=\"cost__first\">' + cost[0] + '</span><span class=\"cost__last\">.' + cost[1] + '</span>';\n\n    return value;\n  }\n\n  function renderRegions(arr) {\n\n    var result = `<div class=\"result__line result__line-my-salary\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">Моя зарплата (гросс)</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost\">0.00</span> ₽/мес\n      </div>\n      <div class=\"result__per result__per-year result__per_selected\">\n        <span class=\"cost\">0.00</span> ₽/год\n      </div>\n    </div>\n  </div>`;\n    \n    for (var i = 0; i < arr.length; i++) {\n      result += `<div class=\"result__line result__line-regions\" data-salary=\"${arr[i].value}\">\n    <div class=\"result__head\">\n      <div class=\"result__title\">${arr[i].name}</div>\n      <div class=\"result__per result__per-month\">\n        <span class=\"cost\">${formatUnit(arr[i].value)}</span> ₽/мес\n      </div>\n      <div class=\"result__per result__per-year\">\n        <span class=\"cost\">${formatUnit(arr[i].value * 12)}</span> ₽/год\n      </div>\n    </div>\n  </div>`;\n    }\n    \n    return result;\n  }\n  \n  \n  function updateRegions(value, valueInPeriod){\n    var $mySalary = $('#salaryInRussia').find('.result__line-my-salary').remove().clone();\n    var similar = 0;\n    var $regions = $('#salaryInRussia').find('.result__line-regions');    \n    \n    $regions.each(function(i,e){\n      \n      if ( $(e).data('salary') >= value ) similar = i;\n      \n    });\n    \n    $mySalary.find('.result__per-month').find('.cost').html(formatUnit(value));\n    $mySalary.find('.result__per-year').find('.cost').html(formatUnit(valueInPeriod));\n        \n    \n    if (value >= $($regions[similar]).data('salary') ){\n      $mySalary.insertBefore( $($regions[similar]) );\n    } else {    \n      $mySalary.insertAfter( $($regions[similar]) );\n    }\n    \n\n    \n  }\n  \n\n  function compare(a, b) {\n      const valueA = a.value;\n      const valueB = b.value;\n\n      let comparison = 0;\n      if (valueA > valueB) {\n        comparison = -1;\n      } else if (valueA < valueB) {\n        comparison = 1;\n      }\n      return comparison;\n    }\n\n  function browserDetect() {\n    \n    \n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var browserName = navigator.appName;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if ((verOffset = nAgt.indexOf(\"Opera\")) != -1) {\n      browserName = \"opera\";\n      fullVersion = nAgt.substring(verOffset + 6);\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1)\n        fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if ((verOffset = nAgt.indexOf(\"MSIE\")) != -1) {\n      browserName = \"ie\";\n      fullVersion = nAgt.substring(verOffset + 5);\n\n    } else if ((verOffset = nAgt.indexOf(\"Chrome\")) != -1) {\n      browserName = \"chrome\";\n      fullVersion = nAgt.substring(verOffset + 7);\n\n    } else if ((verOffset = nAgt.indexOf(\"Safari\")) != -1) {\n      browserName = \"safari\";\n      fullVersion = nAgt.substring(verOffset + 7);\n      if ((verOffset = nAgt.indexOf(\"Version\")) != -1)\n        fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if ((verOffset = nAgt.indexOf(\"Firefox\")) != -1) {\n      browserName = \"firefox\";\n      fullVersion = nAgt.substring(verOffset + 8);\n\n    } else if (nAgt.indexOf(\"FBAN\") != -1 && nAgt.indexOf(\"FBAV\") != -1) {\n      browserName = \"facebook\";\n      fullVersion = 0;\n\n    } else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <\n      (verOffset = nAgt.lastIndexOf('/'))) {\n      browserName = nAgt.substring(nameOffset, verOffset);\n      fullVersion = nAgt.substring(verOffset + 1);\n      if (browserName.toLowerCase() == browserName.toUpperCase()) {\n        browserName = navigator.appName;\n      }\n    }\n\n    if ((ix = fullVersion.indexOf(\";\")) != -1)\n      fullVersion = fullVersion.substring(0, ix);\n    if ((ix = fullVersion.indexOf(\" \")) != -1)\n      fullVersion = fullVersion.substring(0, ix);\n\n    majorVersion = parseInt('' + fullVersion, 10);\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    var ratio = window.devicePixelRatio || 1;\n    var screen = {\n      width: window.screen.width * ratio,\n      height: window.screen.height * ratio\n    };\n\n    return {\n      browserName: browserName.toLowerCase(),\n      fullVersion: fullVersion,\n      majorVersion: majorVersion,\n      appName: navigator.appName.toLowerCase(),\n      userAgent: navigator.userAgent.toLowerCase(),\n      platform: navigator.platform.toLowerCase(),\n      iphoneX: (iOS && screen.width == 1125 && screen.height === 2436) ? 'iphoneX' : '',\n      isMobile: (function () {\n        var check = 'not-mobile';\n        (function (a) {\n          if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = 'mobile';\n        })(navigator.userAgent || navigator.vendor || window.opera);\n        return check;\n      })()\n    }\n\n  };\n\n  function exportToCSV(o) {\n    return `\"\",\"В месяц (₽/мес)\",\"В год (₽/год)\"\\r\\n\n\"Зарплата на руки\",${o.net},${o.netInPeriod}\\r\\n\n\"Оклад\",${o.gross},${o.grossInPeriod}\\r\\n\n\"Полная стоимость сотрудника для работодателя\",${o.fullCost},${o.fullCostInPeriod}\\r\\n\n\"Все выплаты государству\",${o.nalogAll},${o.nalogAllInPeriod}\\r\\n\n\"Налог на доходы физических лиц (НДФЛ)\",${o.ndfl},${o.ndflInPeriod}\\r\\n\n\"В фонд Обязательного пенсионного страхования (ОПС)\",${o.ops},${o.opsInPeriod}\\r\\n\n\"Обязательное медицинское страхование жизни (ОМС)\",${o.oms},${o.omsInPeriod}\\r\\n\n\"В фонд социального страхования (ФСС)\",${o.fss},${o.fssInPeriod}\\r\\n\n\"Взносы по «травматизму»\",${o.insurance},${o.insuranceInPeriod}\\r\\n`;\n  }\n\n\n\n\n});\nfunction Salary(options){\n  var __this = this;\n  \n  options = options || {};\n  this.options = {};\n  this.options.ndfl      = options.ndfl      || 13;      //НДФЛ\n  this.options.ops       = options.ops       || 22;      //Пенсионное страхование\n  this.options.opsMax    = options.opsMax    || 1150000  //Предельная величина дохода для пенсионного страхования\n  this.options.ops2      = options.ops2      || 10;      //Пенсионное страхование свыше предельной величины\n  this.options.oms       = options.oms       || 5.1;     //Медицинское страхование \n  this.options.omsMax    = options.omsMax    || 865000;  //Предельная величина дохода для медицинского страхования\n  this.options.oms2      = options.oms2      || 5.1;     //Медицинское страхование свыше предельной величины \n  this.options.fss       = options.fss       || 2.9;     //Социальное страхование \n  this.options.insurance = options.insurance || 0.2;     //Страховка\n  this.options.period    = options.period    || 12;      //период для расчета (месяцев)\n  \n  \n  \n  this.result = {};\n  \n  this.setGross = function(value){\n    \n    __this.result.gross = Unit(value);\n    __this.result.net = Unit(value - ( Percentage(value, __this.options.ndfl) ));\n    \n    Object.assign(__this.result, setResult(__this.result.gross));\n    \n    return __this.result;\n  }\n  \n  this.setNet = function(value){\n    \n    __this.result.net = Unit(value);\n    __this.result.gross = Unit(value / ( onePercent(100 - __this.options.ndfl) ));\n    \n    Object.assign(__this.result, setResult(__this.result.gross));\n    \n    return __this.result;\n  }\n  \n  function setResult(value){\n    let result = {};\n    let period = __this.options.period;\n    \n    result.netInPeriod       = Unit(__this.result.net * period);\n    result.grossInPeriod     = Unit(__this.result.gross * period);\n    \n    result.ops               = Unit( Percentage(value, __this.options.ops) );\n    result.opsInPeriod       = Unit( maxOnPeriod(result.grossInPeriod, __this.options.opsMax, __this.options.ops, __this.options.ops2) );\n    \n    result.oms               = Unit( Percentage(value, __this.options.oms) );\n    result.omsInPeriod       = Unit( maxOnPeriod(result.grossInPeriod, __this.options.omsMax, __this.options.oms, __this.options.oms2) );\n    \n    result.fss               = Unit( Percentage(value, __this.options.fss) );\n    result.fssInPeriod       = Unit(result.fss * period);\n    \n    result.insurance         = Unit( Percentage(value, __this.options.insurance) );\n    result.insuranceInPeriod = Unit(result.insurance * period);\n    \n    result.ndfl              = Unit( Percentage(value, __this.options.ndfl) );\n    result.ndflInPeriod      = Unit(result.ndfl * period);\n    \n    result.fot               = Unit(result.ops + result.oms + result.fss + result.insurance);\n    result.fotInPeriod       = Unit(result.fot * period);\n    \n    result.nalogAll          = Unit(result.ops + result.oms + result.fss + result.insurance + result.ndfl);\n    result.nalogAllInPeriod  = Unit(result.opsInPeriod + result.omsInPeriod + result.fssInPeriod + result.insuranceInPeriod + result.ndflInPeriod);\n\n    result.fullCost          = Unit(result.nalogAll + __this.result.net);\n    result.fullCostInPeriod  = Unit(result.opsInPeriod + result.omsInPeriod + result.fssInPeriod + result.insuranceInPeriod + result.ndflInPeriod + result.netInPeriod);\n    \n    return result;\n  }\n  \n  function maxOnPeriod(grossInPeriod, max, percentageOnMin, percentageOnMax){\n        \n    return ( grossInPeriod < max ) ? Percentage(grossInPeriod, percentageOnMin) : Percentage(max, percentageOnMin) + Percentage( (grossInPeriod - max), percentageOnMax);\n    \n  }\n\n  function onePercent(value){\n    return value / 100;  \n  }\n  \n  function Percentage(from, percentage){\n    return onePercent(from) * percentage;\n  }\n  \n  function Unit(value){\n    return +( value ).toFixed(2);\n  }\n  \n  \n  \n  return __this;\n  \n}\nconsole.log(\"version: 0.1.0\"); });"],"sourceRoot":"/source/"}